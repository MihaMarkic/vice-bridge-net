<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Righthand.ViceMonitor.Bridge</name>
    </assembly>
    <members>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.AdvanceInstructionCommand">
            <summary>
            Step over a certain number of instructions. 
            </summary>
            <param name="StepOverSubroutine">Should subroutines count as a single instruction?</param>
            <param name="NumberOfInstructions">How many instructions to step over.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.AdvanceInstructionCommand.#ctor(System.Boolean,System.UInt16)">
            <summary>
            Step over a certain number of instructions. 
            </summary>
            <param name="StepOverSubroutine">Should subroutines count as a single instruction?</param>
            <param name="NumberOfInstructions">How many instructions to step over.</param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.AdvanceInstructionCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.AdvanceInstructionCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand">
            <summary>
            Load a program then return to the monitor 
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand.RunAfterLoading">
            <summary>
            Run after loading?
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand.FileIndex">
            <summary>
            The index of the file to execute, if a disk image. 0x00 is the default value.
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand.Filename">
            <summary>
            The filename to autoload. 
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand.#ctor(System.Boolean,System.UInt16,System.String)">
            <summary>
            Creates an instance of <see cref="T:Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand"/>.
            </summary>
            <param name="runAfterLoading">Run after loading?</param>
            <param name="fileIndex">The index of the file to execute, if a disk image. 0x00 is the default value.</param>
            <param name="filename">The filename to autoload. </param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.BanksAvailableCommand">
            <summary>
            Gives a listing of all the bank IDs for the running machine with their names. 
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.BanksAvailableCommand.#ctor">
            <summary>
            Gives a listing of all the bank IDs for the running machine with their names. 
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointDeleteCommand">
            <summary>
            Deletes any type of checkpoint. (break, watch, trace) 
            </summary>
            <param name="CheckpointNumber"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointDeleteCommand.#ctor(System.UInt32)">
            <summary>
            Deletes any type of checkpoint. (break, watch, trace) 
            </summary>
            <param name="CheckpointNumber"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.CheckpointDeleteCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointDeleteCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointGetCommand">
            <summary>
            Gets any type of checkpoint. (break, watch, trace)
            </summary>
            <param name="CheckpointNumber"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointGetCommand.#ctor(System.UInt32)">
            <summary>
            Gets any type of checkpoint. (break, watch, trace)
            </summary>
            <param name="CheckpointNumber"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.CheckpointGetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointGetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointListCommand">
            <summary>
            Lists checkpoints.
            </summary>
            <remarks>
            Emits a series of MON_RESPONSE_CHECKPOINT_INFO responses (see section 13.5.1 Checkpoint Response (0x11)) followed by0x14: MON_RESPONSE_CHECKPOINT_LIST
            </remarks>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointListCommand.#ctor">
            <summary>
            Lists checkpoints.
            </summary>
            <remarks>
            Emits a series of MON_RESPONSE_CHECKPOINT_INFO responses (see section 13.5.1 Checkpoint Response (0x11)) followed by0x14: MON_RESPONSE_CHECKPOINT_LIST
            </remarks>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointSetCommand">
            <summary>
            Sets any type of checkpoint. This combines the functionality of several textual commands (break, watch, trace) into one, as they are all the same with only minor variations. To set conditions, see section 13.4.8 Condition set (0x22) after executing this one.
            </summary>
            <param name="StartAddress"></param>
            <param name="EndAddress"></param>
            <param name="StopWhenHit"></param>
            <param name="Enabled"></param>
            <param name="CpuOperation"></param>
            <param name="Temporary">Deletes the checkpoint after it has been hit once. This is similar to "until" command, but it will not resume the emulator. </param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointSetCommand.#ctor(System.UInt16,System.UInt16,System.Boolean,System.Boolean,Righthand.ViceMonitor.Bridge.Commands.CpuOperation,System.Boolean)">
            <summary>
            Sets any type of checkpoint. This combines the functionality of several textual commands (break, watch, trace) into one, as they are all the same with only minor variations. To set conditions, see section 13.4.8 Condition set (0x22) after executing this one.
            </summary>
            <param name="StartAddress"></param>
            <param name="EndAddress"></param>
            <param name="StopWhenHit"></param>
            <param name="Enabled"></param>
            <param name="CpuOperation"></param>
            <param name="Temporary">Deletes the checkpoint after it has been hit once. This is similar to "until" command, but it will not resume the emulator. </param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.CheckpointSetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointSetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointToggleCommand">
            <summary>
            Checkpoint toggle.
            </summary>
            <param name="CheckpointNumber"></param>
            <param name="Enabled"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointToggleCommand.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Checkpoint toggle.
            </summary>
            <param name="CheckpointNumber"></param>
            <param name="Enabled"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.CheckpointToggleCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointToggleCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ConditionSetCommand">
            <summary>
            Sets a condition on an existing checkpoint. It is not currently possible to retrieve conditions after setting them. 
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ConditionSetCommand.CheckpointNumber">
            <summary></summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ConditionSetCommand.ConditionExpression">
            <summary>
            This is the same format used on the command line.
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ConditionSetCommand.#ctor(System.UInt32,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Righthand.ViceMonitor.Bridge.Commands.ConditionSetCommand"/>.
            </summary>
            <param name="checkpointNumber"></param>
            <param name="conditionExpression">This is the same format used on the command line.</param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ConditionSetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ConditionSetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.CpuOperation">
            <summary>
            CPU Operation to execute
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.CpuOperation.Load">
            <summary>
            Load
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.CpuOperation.Store">
            <summary>
            Store
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.CpuOperation.Exec">
            <summary>
            Exec
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.DisplayGetCommand">
            <summary>
            Gets the current screen in a requested bit format. 
            </summary>
            <param name="UseVic">Must be included, but ignored for all but the C128. If true, (0x01) the screen returned will be from the VIC-II. If false (0x00), it will be from the VDC.</param>
            <param name="Format"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.DisplayGetCommand.#ctor(System.Boolean,Righthand.ViceMonitor.Bridge.Commands.ImageFormat)">
            <summary>
            Gets the current screen in a requested bit format. 
            </summary>
            <param name="UseVic">Must be included, but ignored for all but the C128. If true, (0x01) the screen returned will be from the VIC-II. If false (0x00), it will be from the VDC.</param>
            <param name="Format"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.DisplayGetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.DisplayGetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.DumpCommand">
            <summary>
            Saves the machine state to a file. 
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.DumpCommand.SaveRom">
            <summary>
            Save ROMs to snapshot file?
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.DumpCommand.SaveDisks">
            <summary>
            Save disks to snapshot file?
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.DumpCommand.Filename">
            <summary>
            The filename to save the snapshot to.
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.DumpCommand.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an instance of <see cref="T:Righthand.ViceMonitor.Bridge.Commands.DumpCommand"/>.
            </summary>
            <param name="saveRom">Save ROMs to snapshot file?</param>
            <param name="saveDisks">Save disks to snapshot file?</param>
            <param name="filename">The filename to save the snapshot to.</param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.DumpCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.DumpCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ExecuteUntilReturnCommand">
            <summary>
            Continues execution and returns to the monitor just after the next RTS or RTI is executed.
            </summary>
            <remarks>This command is the same as "return" in the text monitor.</remarks>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ExecuteUntilReturnCommand.#ctor">
            <summary>
            Continues execution and returns to the monitor just after the next RTS or RTI is executed.
            </summary>
            <remarks>This command is the same as "return" in the text monitor.</remarks>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ExitCommand">
            <summary>
            Exit the monitor until the next breakpoint. 
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ExitCommand.#ctor">
            <summary>
            Exit the monitor until the next breakpoint. 
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ImageFormat">
            <summary>
            Image format
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ImageFormat.Indexed">
            <summary>
            Indexed, 8 bit
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ImageFormat.Rgb">
            <summary>
            RGB, 24 bit
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ImageFormat.Bgr">
            <summary>
            BGR, 24 bit
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ImageFormat.Rgba">
            <summary>
            RGBA, 32 bit
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ImageFormat.Bgra">
            <summary>
            BGRA, 32 bit
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.IViceCommand">
            <summary>
            Provides non generic interface to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1"/>.
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.ApiVersion">
            <summary>
            ApiVersion that command is for.
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.CommandType">
            <summary>
            VICE command type specifier.
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.WriteContent(System.Span{System.Byte})">
            <summary>
            Writes command's body to given <paramref name="buffer"/>.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.SetResult(Righthand.ViceMonitor.Bridge.Commands.ViceResponse)">
            <summary>
            Sets response.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.GetBinaryData(System.UInt32)">
            <summary>
            Serializes command into byte array.
            </summary>
            <param name="requestId"></param>
            <returns></returns>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.KeyboardFeedCommand">
            <summary>
            Add text to the keyboard buffer. 
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.KeyboardFeedCommand.Text">
            <summary>
            Special characters such as return are escaped with backslashes. 
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.KeyboardFeedCommand.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Righthand.ViceMonitor.Bridge.Commands.KeyboardFeedCommand"/>.
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.KeyboardFeedCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.KeyboardFeedCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.MemoryGetCommand">
            <summary>
            Reads a chunk of memory from a start address to an end address (inclusive). 
            </summary>
            <param name="SideEffects">Should the read cause side effects?</param>
            <param name="StartAddress"></param>
            <param name="EndAddress"></param>
            <param name="MemSpace">Describes which part of the computer you want to read.</param>
            <param name="BankId">Describes which bank you want. This is dependent on your machine. If the memspace selected doesn't support banks, this value is ignored. </param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.MemoryGetCommand.#ctor(System.Byte,System.UInt16,System.UInt16,Righthand.ViceMonitor.Bridge.Commands.MemSpace,System.UInt16)">
            <summary>
            Reads a chunk of memory from a start address to an end address (inclusive). 
            </summary>
            <param name="SideEffects">Should the read cause side effects?</param>
            <param name="StartAddress"></param>
            <param name="EndAddress"></param>
            <param name="MemSpace">Describes which part of the computer you want to read.</param>
            <param name="BankId">Describes which bank you want. This is dependent on your machine. If the memspace selected doesn't support banks, this value is ignored. </param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.MemoryGetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.MemoryGetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.MemorySetCommand">
            <summary>
            Writes a chunk of memory from a start address to an end address (inclusive). 
            </summary>
            <param name="SideEffects">Should the write cause side effects? </param>
            <param name="StartAddress"></param>
            <param name="EndAddress"></param>
            <param name="MemSpace">Describes which part of the computer you want to write.</param>
            <param name="BankId">Describes which bank you want. This is dependent on your machine. If the memspace selected doesn't support banks, this value is ignored. </param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.MemorySetCommand.#ctor(System.Byte,System.UInt16,System.UInt16,Righthand.ViceMonitor.Bridge.Commands.MemSpace,System.UInt16,Righthand.ViceMonitor.Bridge.ManagedBuffer)">
            <summary>
            Writes a chunk of memory from a start address to an end address (inclusive). 
            </summary>
            <param name="SideEffects">Should the write cause side effects? </param>
            <param name="StartAddress"></param>
            <param name="EndAddress"></param>
            <param name="MemSpace">Describes which part of the computer you want to write.</param>
            <param name="BankId">Describes which bank you want. This is dependent on your machine. If the memspace selected doesn't support banks, this value is ignored. </param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.MemorySetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.MemorySetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.MemSpace">
            <summary>
            Describes which part of the computer you want to operate on. 
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.MemSpace.MainMemory">
            <summary>
            Main memory
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.MemSpace.Drive8">
            <summary>
            Drive 8
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.MemSpace.Drive9">
            <summary>
            Drive 9
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.MemSpace.Drive10">
            <summary>
            Drive 10
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.MemSpace.Drive11">
            <summary>
            Drive 11
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.PingCommand">
            <summary>
            Get an empty response.
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.PingCommand.#ctor">
            <summary>
            Get an empty response.
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.QuitCommand">
            <summary>
            Quits VICE. 
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.QuitCommand.#ctor">
            <summary>
            Quits VICE. 
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableCommand">
            <summary>
            Gives a listing of all the registers for the running machine with their names. 
            </summary>
            <param name="MemSpace">Describes which part of the computer you want to read.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableCommand.#ctor(Righthand.ViceMonitor.Bridge.Commands.MemSpace)">
            <summary>
            Gives a listing of all the registers for the running machine with their names. 
            </summary>
            <param name="MemSpace">Describes which part of the computer you want to read.</param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.RegistersGetCommand">
            <summary>
            Get details about the registers 
            </summary>
            <param name="MemSpace">Describes which part of the computer you want to read.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersGetCommand.#ctor(Righthand.ViceMonitor.Bridge.Commands.MemSpace)">
            <summary>
            Get details about the registers 
            </summary>
            <param name="MemSpace">Describes which part of the computer you want to read.</param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.RegistersGetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersGetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand">
            <summary>
            Set the register values
            </summary>
            <param name="MemSpace">Describes which part of the computer you want to write</param>
            <param name="Items">
            An array with items of structure:
              byte 0: Size of the item, excluding this byte 1: ID of the register byte 2-3: register value
            </param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand.#ctor(Righthand.ViceMonitor.Bridge.Commands.MemSpace,System.Collections.Immutable.ImmutableArray{Righthand.ViceMonitor.Bridge.Commands.RegisterItem})">
            <summary>
            Set the register values
            </summary>
            <param name="MemSpace">Describes which part of the computer you want to write</param>
            <param name="Items">
            An array with items of structure:
              byte 0: Size of the item, excluding this byte 1: ID of the register byte 2-3: register value
            </param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand.#ctor(Righthand.ViceMonitor.Bridge.Commands.MemSpace,Righthand.ViceMonitor.Bridge.Commands.RegisterItem[])">
            <summary>
            Initializes an instance of <see cref="T:Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand"/>.
            </summary>
            <param name="MemSpace">Describes which part of the computer you want to write</param>
            <param name="args">
            An array with items of structure:
              byte 0: Size of the item, excluding this byte 1: ID of the register byte 2-3: register value
            </param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ResetCommand">
            <summary>
            Reset the system or a drive 
            </summary>
            <param name="Mode">What to reset</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ResetCommand.#ctor(Righthand.ViceMonitor.Bridge.Commands.ResetMode)">
            <summary>
            Reset the system or a drive 
            </summary>
            <param name="Mode">What to reset</param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ResetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ResetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ResetMode">
            <summary>
            Reset target
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ResetMode.Soft">
            <summary>
            Soft reset system 
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ResetMode.Hard">
            <summary>
            Hard reset system 
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ResetMode.Drive8">
            <summary>
            Reset drive 8
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ResetMode.Drive9">
            <summary>
            Reset drive 9
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ResetMode.Drive10">
            <summary>
            Reset drive 10
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ResetMode.Drive11">
            <summary>
            Reset drive 11
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand">
            <summary>
            Get a resource value from the emulator. See section 6.1 Format of resource files. 
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand.ResourceName">
            <summary></summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand"/>.
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ResourceSetCommand">
            <summary>
            Set a resource value in the emulator. See section 6.1 Format of resource files. 
            </summary>
            <param name="Resource"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ResourceSetCommand.#ctor(Righthand.ViceMonitor.Bridge.Commands.Resource)">
            <summary>
            Set a resource value in the emulator. See section 6.1 Format of resource files. 
            </summary>
            <param name="Resource"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ResourceSetCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ResourceSetCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ResponseType.CheckpointInfo">
            <summary>
            MON_RESPONSE_CHECKPOINT_INFO 
            </summary>
        </member>
        <member name="F:Righthand.ViceMonitor.Bridge.Commands.ResponseType.CheckpointList">
            <summary>
            MON_RESPONSE_CHECKPOINT_LIST
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.UndumpCommand">
            <summary>
            Loads the machine state from a file.
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.UndumpCommand.Filename">
            <summary>
            The filename to load the snapshot from. 
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.UndumpCommand.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Righthand.ViceMonitor.Bridge.Commands.UndumpCommand"/>.
            </summary>
            <param name="filename">The filename to load the snapshot from. </param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.UndumpCommand.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.UndumpCommand.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1">
            <inheritdoc cref="T:Righthand.ViceMonitor.Bridge.Commands.IViceCommand"/>
            <summary>
            Base class for VICE commands.
            </summary>
            <typeparam name="TResponse">Type of the response to this command.</typeparam>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.ApiVersion">
            <inheritdoc cref="P:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.ApiVersion"/>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.CommandType">
            <inheritdoc cref="P:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.CommandType"/>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.#ctor(Righthand.ViceMonitor.Bridge.Commands.CommandType,System.Byte)">
            <summary>
            Creates an instance.
            </summary>
            <param name="commandType"></param>
            <param name="apiVersion"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.Result">
            <summary>
            Task that returns the result.
            </summary>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.ContentLength">
            <summary>
            Length of the command's body expressed in bytes.
            </summary>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.WriteContent(System.Span{System.Byte})">
            <inheritdoc cref="M:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.WriteContent(System.Span{System.Byte})"/>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.Righthand#ViceMonitor#Bridge#Commands#IViceCommand#SetResult(Righthand.ViceMonitor.Bridge.Commands.ViceResponse)">
            <inheritdoc cref="M:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.SetResult(Righthand.ViceMonitor.Bridge.Commands.ViceResponse)"/>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.GetBinaryData(System.UInt32)">
            <inheritdoc cref="M:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.GetBinaryData(System.UInt32)"/>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ViceCommand`1.WriteString(System.String,System.Span{System.Byte})">
            <inheritdoc cref="P:Righthand.ViceMonitor.Bridge.Commands.IViceCommand.ApiVersion"/>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ParameterlessCommand`1">
            <summary>
            Defines a command without parameters.
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ParameterlessCommand`1.#ctor(Righthand.ViceMonitor.Bridge.Commands.CommandType,System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:Righthand.ViceMonitor.Bridge.Commands.ParameterlessCommand`1"/> command.
            </summary>
            <param name="commandType"></param>
            <param name="apiVersion"></param>
        </member>
        <member name="P:Righthand.ViceMonitor.Bridge.Commands.ParameterlessCommand`1.ContentLength">
            <inheritdoc />
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ParameterlessCommand`1.WriteContent(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ViceResponse">
            <summary>
            Base class for VICE command responses.
            </summary>
            <param name="ApiVersion">ApiVersion that command is for.</param>
            <param name="ErrorCode">Result code.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ViceResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode)">
            <summary>
            Base class for VICE command responses.
            </summary>
            <param name="ApiVersion">ApiVersion that command is for.</param>
            <param name="ErrorCode">Result code.</param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.MemoryGetResponse">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.MemoryGetCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="Memory">The memory at the address.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.MemoryGetResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.Nullable{Righthand.ViceMonitor.Bridge.ManagedBuffer})">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.MemoryGetCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="Memory">The memory at the address.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.MemoryGetResponse.Dispose">
            <summary>
            Disposes the instance.
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointInfoResponse">
            <summary>
            This response is generated by hitting a checkpoint, or by many of the checkpoint commands. 
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="CheckpointNumber"></param>
            <param name="CurrentlyHit"></param>
            <param name="StartAddress"></param>
            <param name="EndAddress"></param>
            <param name="StopWhenHit"></param>
            <param name="Enabled"></param>
            <param name="CpuOperation"></param>
            <param name="Temporary">Deletes the checkpoint after it has been hit once. This is similar to "until" command, but it will not resume the emulator. </param>
            <param name="HitCount"></param>
            <param name="IgnoreCount"></param>
            <param name="HasCondition"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointInfoResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.UInt32,System.Boolean,System.UInt16,System.UInt16,System.Boolean,System.Boolean,Righthand.ViceMonitor.Bridge.Commands.CpuOperation,System.Boolean,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            This response is generated by hitting a checkpoint, or by many of the checkpoint commands. 
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="CheckpointNumber"></param>
            <param name="CurrentlyHit"></param>
            <param name="StartAddress"></param>
            <param name="EndAddress"></param>
            <param name="StopWhenHit"></param>
            <param name="Enabled"></param>
            <param name="CpuOperation"></param>
            <param name="Temporary">Deletes the checkpoint after it has been hit once. This is similar to "until" command, but it will not resume the emulator. </param>
            <param name="HitCount"></param>
            <param name="IgnoreCount"></param>
            <param name="HasCondition"></param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointListResponse">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointListCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="TotalNumberOfCheckpoints"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.CheckpointListResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.UInt32)">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.CheckpointListCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="TotalNumberOfCheckpoints"></param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.RegistersResponse">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.RegistersGetCommand"/> and 
            <see cref="T:Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="Items">
            An array with items of structure:
              byte 0: Size of the item, excluding this byte
              byte 1: ID of the register
              byte 2-3: register value
            </param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.Collections.Immutable.ImmutableArray{Righthand.ViceMonitor.Bridge.Commands.RegisterItem})">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.RegistersGetCommand"/> and 
            <see cref="T:Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="Items">
            An array with items of structure:
              byte 0: Size of the item, excluding this byte
              byte 1: ID of the register
              byte 2-3: register value
            </param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.UndumpResponse">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.UndumpCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="ProgramCounterPosition">The current program counter position</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.UndumpResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.UInt16)">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.UndumpCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="ProgramCounterPosition">The current program counter position</param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ResourceGetResponse">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="Resource"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ResourceGetResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,Righthand.ViceMonitor.Bridge.Commands.Resource)">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="Resource"></param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.JamResponse">
            <summary>
            Response to <see cref="!:Righthand.ViceMonitor.Bridge.Commands.JamCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="ProgramCounterPosition">The current program counter position.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.JamResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.UInt16)">
            <summary>
            Response to <see cref="!:Righthand.ViceMonitor.Bridge.Commands.JamCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="ProgramCounterPosition">The current program counter position.</param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.StoppedResponse">
            <summary>
            Response to <see cref="!:Righthand.ViceMonitor.Bridge.Commands.StoppedCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="ProgramCounterPosition">The current program counter position.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.StoppedResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.UInt16)">
            <summary>
            Response to <see cref="!:Righthand.ViceMonitor.Bridge.Commands.StoppedCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="ProgramCounterPosition">The current program counter position.</param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.ResumedResponse">
            <summary>
            Response to <see cref="!:Righthand.ViceMonitor.Bridge.Commands.ResumedCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="ProgramCounterPosition">The current program counter position.</param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.ResumedResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.UInt16)">
            <summary>
            Response to <see cref="!:Righthand.ViceMonitor.Bridge.Commands.ResumedCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="ProgramCounterPosition">The current program counter position.</param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.BanksAvailableResponse">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.BanksAvailableCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="Banks"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.BanksAvailableResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.Collections.Immutable.ImmutableArray{Righthand.ViceMonitor.Bridge.Commands.BankItem})">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.BanksAvailableCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="Banks"></param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableResponse">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            /// <param name="Banks"></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.Collections.Immutable.ImmutableArray{Righthand.ViceMonitor.Bridge.Commands.FullRegisterItem})">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            /// <param name="Banks"></param>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.DisplayGetResponse">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.BanksAvailableCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="DebugWidth"></param>
            <param name="DebugHeight"></param>
            <param name="DebugOffsetX"></param>
            <param name="DebugOffsetY"></param>
            <param name="InnerWidth">Image width</param>
            <param name="InnerHeight">Image height</param>
            <param name="Image">Image bytes packed into <see cref="T:Righthand.ViceMonitor.Bridge.ManagedBuffer"/>.</param>
            <remarks>
            Object has to be disposed once it is processed to free memory occupied by <see cref="P:Righthand.ViceMonitor.Bridge.Commands.DisplayGetResponse.Image"/>.
            </remarks>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.DisplayGetResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Nullable{Righthand.ViceMonitor.Bridge.ManagedBuffer})">
            <summary>
            Response to <see cref="T:Righthand.ViceMonitor.Bridge.Commands.BanksAvailableCommand"/>.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
            <param name="DebugWidth"></param>
            <param name="DebugHeight"></param>
            <param name="DebugOffsetX"></param>
            <param name="DebugOffsetY"></param>
            <param name="InnerWidth">Image width</param>
            <param name="InnerHeight">Image height</param>
            <param name="Image">Image bytes packed into <see cref="T:Righthand.ViceMonitor.Bridge.ManagedBuffer"/>.</param>
            <remarks>
            Object has to be disposed once it is processed to free memory occupied by <see cref="P:Righthand.ViceMonitor.Bridge.Commands.DisplayGetResponse.Image"/>.
            </remarks>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.DisplayGetResponse.Dispose">
            <summary>
            Disposed the object.
            </summary>
        </member>
        <member name="T:Righthand.ViceMonitor.Bridge.Commands.EmptyViceResponse">
            <summary>
            Empty response.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Commands.EmptyViceResponse.#ctor(System.Byte,Righthand.ViceMonitor.Bridge.Commands.ErrorCode)">
            <summary>
            Empty response.
            </summary>
            <param name="ApiVersion"><inheritdoc /></param>
            <param name="ErrorCode"><inheritdoc /></param>
        </member>
        <member name="E:Righthand.ViceMonitor.Bridge.Services.Implementation.ViceBridge.ViceResponse">
            <summary>
            Triggers on all unbound responses.
            </summary>
            <threadsafety>Runs on any thread</threadsafety>
        </member>
        <member name="M:Righthand.ViceMonitor.Bridge.Services.Implementation.ViceBridge.GetResponseAsync(System.Net.Sockets.Socket,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="ct"></param>
            <returns>An instance of <see cref="T:Righthand.ViceMonitor.Bridge.ManagedBuffer"/> that has to be disposed after use.</returns>
        </member>
    </members>
</doc>

using System;
using System.Collections.Immutable;
using Righthand.ViceMonitor.Bridge.Commands;
using Righthand.ViceMonitor.Bridge.Shared;

namespace Righthand.ViceMonitor.Bridge.Responses
{
    /// <summary>
    /// Base class for VICE command responses.
    /// </summary>
    /// <param name="ApiVersion">ApiVersion that command is for.</param>
    /// <param name="ErrorCode">Result code.</param>
    public abstract record ViceResponse(byte ApiVersion, ErrorCode ErrorCode);

    /// <summary>
    /// Response to <see cref="MemoryGetCommand"/>.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="Memory">The memory at the address.</param>
    public record MemoryGetResponse(byte ApiVersion, ErrorCode ErrorCode, ManagedBuffer? Memory) : ViceResponse(ApiVersion, ErrorCode), IDisposable
    {
        /// <summary>
        /// Releases all resources used by the <see cref="MemoryGetResponse"/>.
        /// </summary>
        public void Dispose()
        {
            Memory?.Dispose();
        }
    }

    /// <summary>
    /// This response is generated by hitting a checkpoint, or by many of the checkpoint commands. 
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="CheckpointNumber"></param>
    /// <param name="CurrentlyHit"></param>
    /// <param name="StartAddress"></param>
    /// <param name="EndAddress"></param>
    /// <param name="StopWhenHit"></param>
    /// <param name="Enabled"></param>
    /// <param name="CpuOperation"></param>
    /// <param name="Temporary">Deletes the checkpoint after it has been hit once. This is similar to "until" command, but it will not resume the emulator. </param>
    /// <param name="HitCount"></param>
    /// <param name="IgnoreCount"></param>
    /// <param name="HasCondition"></param>
    public record CheckpointInfoResponse(byte ApiVersion, ErrorCode ErrorCode, uint CheckpointNumber, bool CurrentlyHit, ushort StartAddress, ushort EndAddress,
        bool StopWhenHit, bool Enabled, CpuOperation CpuOperation, bool Temporary, uint HitCount, uint IgnoreCount, bool HasCondition) 
        : ViceResponse(ApiVersion, ErrorCode);

    /// <summary>
    /// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.CheckpointListCommand"/>.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="TotalNumberOfCheckpoints"></param>
    /// <param name="Info">An array of matching <see cref="Righthand.ViceMonitor.Bridge.Responses.CheckpointInfoResponse"/>.</param>
    public record CheckpointListResponse(byte ApiVersion, ErrorCode ErrorCode, uint TotalNumberOfCheckpoints, ImmutableArray<CheckpointInfoResponse> Info) : ViceResponse(ApiVersion, ErrorCode);

    /// <summary>
    /// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.RegistersGetCommand"/> and 
    /// <see cref="Righthand.ViceMonitor.Bridge.Commands.RegistersSetCommand"/>.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="Items">
    /// An array with items of structure:
    ///   byte 0: Size of the item, excluding this byte
    ///   byte 1: ID of the register
    ///   byte 2-3: register value
    /// </param>
    public record RegistersResponse(byte ApiVersion, ErrorCode ErrorCode, ImmutableArray<RegisterItem> Items) 
        : ViceResponse(ApiVersion, ErrorCode);
    /// <summary>
    /// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.UndumpCommand"/>.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="ProgramCounterPosition">The current program counter position</param>
    public record UndumpResponse(byte ApiVersion, ErrorCode ErrorCode, ushort ProgramCounterPosition) : ViceResponse(ApiVersion, ErrorCode);
    /// <summary>
    /// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.ResourceGetCommand"/>.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="Resource"></param>
    public record ResourceGetResponse(byte ApiVersion, ErrorCode ErrorCode, Resource? Resource) : ViceResponse(ApiVersion, ErrorCode);
    /// <summary>
    /// When the CPU jams.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="ProgramCounterPosition">The current program counter position.</param>
    public record JamResponse(byte ApiVersion, ErrorCode ErrorCode, ushort ProgramCounterPosition): ViceResponse(ApiVersion, ErrorCode);
    /// <summary>
    /// When the machine stops for the monitor, either due to hitting a checkpoint or stepping.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="ProgramCounterPosition">The current program counter position.</param>
    public record StoppedResponse(byte ApiVersion, ErrorCode ErrorCode, ushort ProgramCounterPosition) : ViceResponse(ApiVersion, ErrorCode);
    /// <summary>
    /// When the machine resumes execution for any reason.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="ProgramCounterPosition">The current program counter position.</param>
    public record ResumedResponse(byte ApiVersion, ErrorCode ErrorCode, ushort ProgramCounterPosition) : ViceResponse(ApiVersion, ErrorCode);
    /// <summary>
    /// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.BanksAvailableCommand"/>.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="Banks"></param>
    public record BanksAvailableResponse(byte ApiVersion, ErrorCode ErrorCode, ImmutableArray<BankItem> Banks) : ViceResponse(ApiVersion, ErrorCode);
    /// <summary>
    /// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.RegistersAvailableCommand"/>.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// /// <param name="Items"></param>
    public record RegistersAvailableResponse(byte ApiVersion, ErrorCode ErrorCode, ImmutableArray<FullRegisterItem> Items) : ViceResponse(ApiVersion, ErrorCode);
    /// <summary>
    /// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.BanksAvailableCommand"/>.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    /// <param name="DebugWidth"></param>
    /// <param name="DebugHeight"></param>
    /// <param name="DebugOffsetX"></param>
    /// <param name="DebugOffsetY"></param>
    /// <param name="InnerWidth">Image width</param>
    /// <param name="InnerHeight">Image height</param>
    /// <param name="Image">Image bytes packed into <see cref="ManagedBuffer"/>.</param>
    /// <remarks>
    /// Object has to be disposed once it is processed to free memory occupied by <see cref="Image"/>.
    /// </remarks>
    public record DisplayGetResponse(byte ApiVersion, ErrorCode ErrorCode, 
        ushort DebugWidth, ushort DebugHeight, ushort DebugOffsetX, ushort DebugOffsetY, ushort InnerWidth, ushort InnerHeight, ManagedBuffer? Image)
        : ViceResponse(ApiVersion, ErrorCode), IDisposable
    {
        /// <summary>
        /// Releases all resources used by the <see cref="DisplayGetResponse"/>.
        /// </summary>
        public void Dispose()
        {
            Image?.Dispose();
        }
    }
    /// <summary>
    /// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.AutoStartCommand"/>.
    /// </summary>
    public record AutoStartResponse(byte ApiVersion, ErrorCode ErrorCode): ViceResponse(ApiVersion, ErrorCode);
    ///// <summary>
    ///// Response to <see cref="Righthand.ViceMonitor.Bridge.Commands.InfoCommand"/>.
    ///// </summary>
    ///// <param name="ApiVersion"><inheritdoc /></param>
    ///// <param name="ErrorCode"><inheritdoc /></param>
    ///// <param name="VersionRCNumber">Version RC number.</param>
    //public record InfoResponse(byte ApiVersion, ErrorCode ErrorCode, byte VersionRCNumber) : ViceResponse(ApiVersion, ErrorCode);

    /// <summary>
    /// Empty response.
    /// </summary>
    /// <param name="ApiVersion"><inheritdoc /></param>
    /// <param name="ErrorCode"><inheritdoc /></param>
    public record EmptyViceResponse(byte ApiVersion, ErrorCode ErrorCode) : ViceResponse(ApiVersion, ErrorCode);
}
